<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Flatwhite.WebApi</name>
    </assembly>
    <members>
        <member name="T:Flatwhite.WebApi.AsyncCountdownEvent">
            <summary>
            An async-compatible countdown event.
            https://github.com/StephenCleary/AspNetBackgroundTasks/blob/master/src/AspNetBackgroundTasks/Internal/AsyncCountdownEvent.cs
            </summary>
        </member>
        <member name="F:Flatwhite.WebApi.AsyncCountdownEvent._tcs">
            <summary>
            The TCS used to signal this event.
            </summary>
        </member>
        <member name="F:Flatwhite.WebApi.AsyncCountdownEvent._count">
            <summary>
            The remaining count on this event.
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.AsyncCountdownEvent.#ctor(System.Int32)">
            <summary>
            Creates an async-compatible countdown event.
            </summary>
            <param name="count">The number of signals this event will need before it becomes set. Must be greater than zero.</param>
        </member>
        <member name="M:Flatwhite.WebApi.AsyncCountdownEvent.WaitAsync">
            <summary>
            Asynchronously waits for this event to be set.
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.AsyncCountdownEvent.ModifyCount(System.Int32)">
            <summary>
            Attempts to modify the current count by the specified amount. This method returns <c>false</c> if the new current count value would be invalid, or if the count has already reached zero.
            </summary>
            <param name="signalCount">The amount to change the current count. This must be +1 or -1.</param>
        </member>
        <member name="M:Flatwhite.WebApi.AsyncCountdownEvent.AddCount">
            <summary>
            Attempts to add one to the current count. This method throws <see cref="T:System.InvalidOperationException"/> if the count is already at zero or if the new count would be greater than <see cref="F:System.Int32.MaxValue"/>.
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.AsyncCountdownEvent.Signal">
            <summary>
            Attempts to subtract one from the current count. This method throws <see cref="T:System.InvalidOperationException"/> if the count is already at zero or if the new count would be less than zero.
            </summary>
        </member>
        <member name="T:Flatwhite.WebApi.CacheControl.CachControlHeaderHandlerProvider">
            <summary>
            Default implementation of <see cref="T:Flatwhite.WebApi.CacheControl.ICachControlHeaderHandlerProvider" /> using a static <see cref="T:System.Collections.Generic.List`1" />
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.CacheControl.CachControlHeaderHandlerProvider.Get(System.Net.Http.HttpRequestMessage)">
            <summary>
            Get all registered <see cref="T:Flatwhite.WebApi.CacheControl.ICachControlHeaderHandlerProvider" /> from this provider
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.WebApi.CacheControl.CachControlHeaderHandlerProvider.Register(Flatwhite.WebApi.CacheControl.ICachControlHeaderHandler)">
            <summary>
            Register a <see cref="T:Flatwhite.WebApi.CacheControl.ICachControlHeaderHandlerProvider" /> to this provider
            </summary>
            <param name="handler"></param>
        </member>
        <member name="T:Flatwhite.WebApi.CacheControl.EvaluateServerCacheHandler">
            <summary>
            An implementation of <see cref="T:Flatwhite.WebApi.CacheControl.ICachControlHeaderHandler" /> that use the request uri whether these is an exisisting cache data
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.CacheControl.EvaluateServerCacheHandler.#ctor(Flatwhite.WebApi.ICacheResponseBuilder)">
            <summary>
            Initializes an object of <see cref="T:Flatwhite.WebApi.CacheControl.EvaluateServerCacheHandler" /> using a provided <see cref="T:Flatwhite.WebApi.ICacheResponseBuilder" />
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Flatwhite.WebApi.CacheControl.EvaluateServerCacheHandler.HandleAsync(System.Net.Http.Headers.CacheControlHeaderValue,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Try to get the cache from url and httpmethod and build the response if cache is available
            </summary>
            <param name="cacheControl"></param>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.WebApi.CacheControl.EvaluateServerCacheHandler.ShouldIgnoreCache(System.Net.Http.Headers.CacheControlHeaderValue,System.Net.Http.HttpRequestMessage)">
            <summary>
            Determine whether or not should ignore all the cache settings base on the current request and cache control header
            </summary>
            <param name="cacheControl"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.WebApi.CacheControl.EtagHeaderHandler">
            <summary>
            An implementation of <see cref="T:Flatwhite.WebApi.CacheControl.ICachControlHeaderHandler" /> that use the etag to check whether these is an exisisting cache data
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.CacheControl.EtagHeaderHandler.#ctor(Flatwhite.WebApi.ICacheResponseBuilder)">
            <summary>
            Initializes an object of <see cref="T:Flatwhite.WebApi.CacheControl.EtagHeaderHandler" /> using a provided <see cref="T:Flatwhite.WebApi.ICacheResponseBuilder" />
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Flatwhite.WebApi.CacheControl.EtagHeaderHandler.HandleAsync(System.Net.Http.Headers.CacheControlHeaderValue,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Try to get the cache from etag and build the response if cache is available
            </summary>
            <param name="cacheControl"></param>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.WebApi.CacheControl.ICachControlHeaderHandlerProvider">
            <summary>
            A provider to get all registered <see cref="T:Flatwhite.WebApi.CacheControl.ICachControlHeaderHandler" /> from request
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.CacheControl.ICachControlHeaderHandlerProvider.Get(System.Net.Http.HttpRequestMessage)">
            <summary>
            Get all registered <see cref="T:Flatwhite.WebApi.CacheControl.ICachControlHeaderHandler" /> from request
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.WebApi.CacheControl.ICachControlHeaderHandlerProvider.Register(Flatwhite.WebApi.CacheControl.ICachControlHeaderHandler)">
            <summary>
            Register a <see cref="T:Flatwhite.WebApi.CacheControl.ICachControlHeaderHandler" /> to current provider 
            </summary>
            <param name="handler"></param>
        </member>
        <member name="T:Flatwhite.WebApi.CacheControl.ICachControlHeaderHandler">
            <summary>
            Provide a single method to try to build a <see cref="T:System.Net.Http.Headers.HttpResponseHeaders" /> from <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> and <see cref="T:System.Net.Http.HttpRequestMessage" />
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.CacheControl.ICachControlHeaderHandler.HandleAsync(System.Net.Http.Headers.CacheControlHeaderValue,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            This method will try to build a <see cref="T:System.Net.Http.Headers.HttpResponseHeaders" /> from <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> and <see cref="T:System.Net.Http.HttpRequestMessage" />
            </summary>
            <param name="cacheControl"></param>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.WebApi.CacheMessageHandler">
            http://www.asp.net/web-api/overview/security/authentication-and-authorization-in-aspnet-web-api
            <summary>
            This is a custom WebApi message handler which try to build the response if cache data is available
            This should create a response asap if there is the cache without waiting for the <see cref="T:Flatwhite.WebApi.OutputCacheAttribute" /> to do that which is quite late
            and quite heavy "if your controller has too many dependencies". People should try to not having heavy Controller anyway. 
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.CacheMessageHandler.#ctor(Flatwhite.WebApi.CacheControl.ICachControlHeaderHandlerProvider)">
            <summary>
            Initializes an instance of <see cref="T:Flatwhite.WebApi.CacheMessageHandler" /> from a provided <see cref="T:Flatwhite.WebApi.CacheControl.ICachControlHeaderHandlerProvider" />
            </summary>
            <param name="handlerProvider"></param>
        </member>
        <member name="M:Flatwhite.WebApi.CacheMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Process the request and attempt to build the response from cache
            If it failed, it simply logs the error and continue the pipeline
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.WebApi.CacheResponseBuilder">
            <summary>
            Build a response from cacheItem but also take into account all cache-request-directive 
            http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.CacheResponseBuilder.GetResponse(System.Net.Http.Headers.CacheControlHeaderValue,Flatwhite.WebApi.WebApiCacheItem,System.Net.Http.HttpRequestMessage)">
            <summary>
            Provide a single method to try to build a <see cref="T:System.Net.Http.Headers.HttpResponseHeaders" /> from <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" />  and <see cref="T:System.Net.Http.HttpRequestMessage" />
            </summary>
        </member>
        <member name="T:Flatwhite.WebApi.FlatwhiteWebApiConfiguration">
            <summary>
            Flatwhite webapi configuration
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.FlatwhiteWebApiConfiguration.EnableStatusController">
            <summary>
            If true, Flatwhite will register route /_flatwhite/store/{storeId} to allow checking cache item status
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.FlatwhiteWebApiConfiguration.LoopbackAddress">
            <summary>
            Loopback address that webapi uses to refresh the stale cache. If not set, Flatwhite will use the original request uri when attempt to refresh the cache
            <para>Set it to web server loopback address if server is behind firewall, example: http://localhost:port</para>
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.FlatwhiteWebApiConfiguration.#ctor">
            <summary>
            Initialize  default flatwhite webapi config
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.FlatwhiteWebApiConfiguration.ResponseBuilder">
            <summary>
            Default cache response builder
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.FlatwhiteWebApiConfiguration.IgnoreVaryCustomKeys">
            <summary>
            If you dont use vary by headers and vary by custom, Flatwhite cache will try to match the cache by keys generated from the request Uri
            <para>So if there is an available cache, it will return the response straight away and improve the performance significantly as it doesn't need to wait until the Controller and OutputCache action filter to be created.
            However every (normally GET) requests come to the server will make the cache store check the cache key which could be the issue.
            You can override <see cref="T:Flatwhite.WebApi.CacheControl.EvaluateServerCacheHandler"/> to make it smarter by avoid the known requests that you don't need checking the cache and register to WebApi DependencyResolver
            </para>
            </summary>
        </member>
        <member name="T:Flatwhite.WebApi.ICacheResponseBuilder">
            <summary>
            Build a response from cacheItem but also take into account all cache-request-directive 
            This should be resolvable from <see cref="T:System.Web.Http.Dependencies.IDependencyResolver" />
            http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.ICacheResponseBuilder.GetResponse(System.Net.Http.Headers.CacheControlHeaderValue,Flatwhite.WebApi.WebApiCacheItem,System.Net.Http.HttpRequestMessage)">
            <summary>
            Build a <see cref="T:System.Net.Http.Headers.HttpResponseHeaders" /> from <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> and <see cref="T:Flatwhite.WebApi.WebApiCacheItem" />
            </summary>
            <param name="requestCacheControl"></param>
            <param name="cacheItem"></param>
            <param name="request"></param>
            <returns>Return null if the cacheItem is not suitable for the request cache control, such as max-age, min-fresh is provided and the cache item is not qualified</returns>
        </member>
        <member name="T:Flatwhite.WebApi.FlatwhiteStatusController">
            <summary>
            Status controller
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.FlatwhiteStatusController.#ctor(Flatwhite.Provider.ICacheStoreProvider)">
            <summary>
            Initialize an instance of FlatwhiteStatusController
            </summary>
            <param name="cacheStoreProvider"></param>
        </member>
        <member name="M:Flatwhite.WebApi.FlatwhiteStatusController.#ctor">
            <summary>
            Initialize an instance of FlatwhiteStatusController
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.FlatwhiteStatusController.Phoenixes">
            <summary>
            Get all phoenix statuses
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.WebApi.FlatwhiteStatusController.Store(System.Int32)">
            <summary>
            Get all Flatwhite cache items in memory
            </summary>
            <param name="id">StoreId</param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.WebApi.FlatwhiteStatusController.GetObjectSize(System.Object)">
            <summary>
            Calculates the lenght in bytes of an object 
            and returns the size 
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.WebApi.IHttpClient">
            <summary>
            Provides a base class for sending HTTP requests and receiving HTTP responses from a resource identified by a URI.
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.IHttpClient.Timeout">
            <summary>
            Gets or sets the timespan to wait before the request times out.
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.IHttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)">
            <summary>
            Send an HTTP request as an asynchronous operation.
            </summary>
            <param name="request">The HTTP request message to send.</param>
            <param name="completionOption">When the operation should complete (as soon as a response is available or after reading the whole response content).</param>
            <returns>Returns System.Threading.Tasks.Task`1.The task object representing the asynchronous operation.</returns>
        </member>
        <member name="T:Flatwhite.WebApi.RegisteredTasks">
            https://github.com/StephenCleary/AspNetBackgroundTasks/blob/master/src/AspNetBackgroundTasks/Internal/RegisteredTasks.cs
        </member>
        <member name="F:Flatwhite.WebApi.RegisteredTasks._shutdown">
            <summary>
            A cancellation token that is set when ASP.NET is shutting down the app domain.
            </summary>
        </member>
        <member name="F:Flatwhite.WebApi.RegisteredTasks._count">
            <summary>
            A countdown event that is incremented each time a task is registered and decremented each time it completes. When it reaches zero, we are ready to shut down the app domain. 
            </summary>
        </member>
        <member name="F:Flatwhite.WebApi.RegisteredTasks._done">
            <summary>
            A task that completes after <see cref="F:Flatwhite.WebApi.RegisteredTasks._count"/> reaches zero and the object has been unregistered.
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.RegisteredTasks.#ctor">
            <summary>
            Creates an instance that is registered with the ASP.NET runtime.
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.RegisteredTasks.Register(System.Threading.Tasks.Task)">
            <summary>
            Registers a task with the ASP.NET runtime. The task is unregistered when it completes.
            </summary>
            <param name="task">The task to register.</param>
        </member>
        <member name="M:Flatwhite.WebApi.RegisteredTasks.Run(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Executes an asynchronous background operation, registering it with ASP.NET.
            </summary>
            <param name="operation">The background operation.</param>
        </member>
        <member name="T:Flatwhite.WebApi.WebApiCacheItem">
            <summary>
            A cache item object that keeps some details about the data to be cached
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.WebApiCacheItem.Content">
            <summary>
            The response data
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.WebApiCacheItem.Checksum">
            <summary>
            The checksum of the Content
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.WebApiCacheItem.ResponseMediaType">
            <summary>
            Media type
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.WebApiCacheItem.ResponseCharSet">
            <summary>
            Charset
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.WebApiCacheItem.StaleIfError">
            <summary>
            https://tools.ietf.org/html/rfc5861#4.1
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.WebApiCacheItem.IgnoreRevalidationRequest">
            <summary>
            A cache MAY be configured to return stale responses without validation
            <para>If set to TRUE, the server will return cache item as soon as the cache item is available and ignore all cache control directives sent from client
            such as no-cache, no-store or max-age, max-stale. Warning 110 (Response is stale) will be included in the response header</para>
            <para>This may be helpful to guarantee that the endpoint will not revalidate the cache all the time by some one sending request with no-cache header</para>
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.WebApiCacheItem.Path">
            <summary>
            The path that was cached
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.WebApiCacheItem.CloneWithoutData">
            <summary>
            Clone the WebApiCacheItem without the content and with a fresh CreatedTime
            </summary>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.WebApi.RevalidateAttribute">
            <summary>
            Use this attribute to decorate on a method where you want to revalidate a specific cache entry after a method is invoked
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.RevalidateAttribute.KeyFormats">
            <summary>
            List of "revalidation keys" to notify the cache store. They are not neccessary the cache key
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.RevalidateAttribute.#ctor(System.String[])">
            <summary>
            Initializes a <see cref="T:Flatwhite.WebApi.RevalidateAttribute" /> with a list of revalidation keys
            </summary>
            <param name="keyFormats">List of "revalidation key format" to notify the cache store. They are not the cache keys</param>
        </member>
        <member name="M:Flatwhite.WebApi.RevalidateAttribute.OnActionExecuted(System.Web.Http.Filters.HttpActionExecutedContext)">
            <summary>
            Revalidate caches after call method
            </summary>
            <param name="actionExecutedContext"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.WebApi.RevalidateAttribute.OnActionExecutedAsync(System.Web.Http.Filters.HttpActionExecutedContext,System.Threading.CancellationToken)">
            <summary>
            Revalidate caches after call method
            </summary>
            <param name="actionExecutedContext"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.WebApi.RevalidateAttribute.GetInvocation(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Get <see cref="T:Flatwhite._IInvocation" /> from <see cref="T:System.Web.Http.Controllers.HttpActionContext" />
            </summary>
            <param name="actionContext"></param>
            <returns></returns>
        </member>
        <member name="P:Flatwhite.WebApi.RevalidateAttribute.CacheKeyProvider">
            <summary>
            Default cache key provider
            </summary>
        </member>
        <member name="T:Flatwhite.WebApi.WebApiCacheStrategy">
            <summary>
            A <see cref="T:Flatwhite.ICacheStrategy"/> implementation for web api
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.WebApiCacheStrategy.CanCacheNoneVirtualOrFinalMethods">
            <summary>
            Should return true as WebApi doesn't use Dynamic proxy
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.WebApi.WebApiCacheStrategy.GetCacheStore(Flatwhite._IInvocation,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            WebAPI should use AsyncCacheStore instead
            </summary>
            <param name="invocation"></param>
            <param name="invocationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.WebApi.WebApiCacheStrategyProvider">
            <summary>
            A provider to return <see cref="T:Flatwhite.WebApi.WebApiCacheStrategy" /> for WebApi request
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.WebApiCacheStrategyProvider.GetStrategy(Flatwhite._IInvocation,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Return a <see cref="T:Flatwhite.ICacheStrategy" /> if the request is webApi request
            </summary>
            <param name="invocation"></param>
            <param name="invocationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.WebApi.OutputCacheAttribute">
            <summary>
            Represents an attribute that is used to mark an WebApi action method whose output will be cached.
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.CacheStrategyType">
            <summary>
            The custom type of <see cref="T:Flatwhite.ICacheStrategy" /> to use. If not provided, the default strategy from <see cref="P:Flatwhite.Global.CacheStrategyProvider"/> will be used
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.CacheStoreType">
            <summary>
            The custom type of <see cref="T:Flatwhite.ICacheStore" /> to use. If not provided, the default strategy from Global will be used
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.CacheStoreId">
            <summary>
            The unique number id of the cache store when registered against the <see cref="T:Flatwhite.Provider.ICacheStoreProvider" />
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.MaxAge">
            <summary>
            Gets or sets the cache duration, in seconds.
            <para>Also set Cache-Control: max-age=*seconds* to the message response header.</para>
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.SMaxAge">
            <summary>
            Set Cache-Control: s-maxage=*seconds* to the message response header.
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.VaryByParam">
            <summary>
            A semicolon-separated list of strings that correspond to to parameter values
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.VaryByCustom">
            <summary>
            Gets or sets the VaryByCustom value which facilitate different cache rules by custom key in invocationContext.
            <para>There are 4 default WebApi objects you can make use: "headers", "query", "method" and "requestUri". 
            It supports dot notation for child properties and all require case-sensitive but query. All query string names and values are lowercase</para>
            <para>For example you can use VaryByCustom= "headers.AcceptCharset, headers.CacheControl.Public, query.querystring1, query.querystring2"</para>
            <para>Even though the WebApi headers object is available that way with VaryByCustom, you should use <see cref="P:Flatwhite.WebApi.OutputCacheAttribute.VaryByHeader" /> without specifying "headers." prefix</para>
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.VaryByHeader">
            <summary>
            The VaryByHeader is a semicolon-delimited set of headers used to vary the cached output. 
            <para>These are HTTP headers associated with the request, you can use nested objects as the headers object is actually WebApi Request.Headers object</para>
            <para>Example: VaryByHeader = "UserAgent, CacheControl.Public"</para>
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.MustRevalidate">
            <summary>
            Set Cache-Control: must-revalidate to the message response header.
            <para>Whether the origin server require revalidation of a cache entry on any subsequent use when the cache entry becomes stale.</para>
            <para>http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.4</para> 
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.ProxyRevalidate">
            <summary>
            Set Cache-Control: proxy-revalidate to the message response header.
            <para>The proxy-revalidate directive has the same meaning as the must- revalidate directive, except that it does not apply to non-shared user agent caches.</para>
            <para>http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.4</para>
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.NoCache">
            <summary>
            Set Cache-Control: no-cache to the message response header. IE uses no-cache, and Firefox uses no-store.
            <para>If the no-cache directive does not specify a field-name, then a cache MUST NOT use the response to satisfy a subsequent request without successful revalidation with the origin server. This allows an origin server to prevent caching even by caches that have been configured to return stale responses to client requests.</para>
            <para>If the no-cache directive does specify one or more field-names, then a cache MAY use the response to satisfy a subsequent request, subject to any other restrictions on caching.However, the specified field-name(s) MUST NOT be sent in the response to a subsequent request without successful revalidation with the origin server.This allows an origin server to prevent the re-use of certain header fields in a response, while still allowing caching of the rest of the response.</para>
            <para>http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.1</para>
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.NoStore">
            <summary>
            Set Cache-Control: no-store to the message response header. IE uses no-cache, and Firefox uses no-store.
            <para>A cache (browser cache, proxies) MUST NOT store any part of either this response or the request that elicited it. This directive applies to both non-shared and shared caches.</para>
            http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.2
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.NoTransform">
            <summary>
            Set Cache-Control:no-transform to the message response header.
            <para>http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.5</para>
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.Private">
            <summary>
            Set Cache-Control: private to the message response header.
            <para>Indicates that all or part of the response message is intended for a single user and MUST NOT be cached by a shared cache.</para>
            <para>This allows an origin server to state that the specified parts of the response are intended for only one user and are not a valid response for requests by other users.</para>
            <para>A private (non-shared) cache MAY cache the response.</para>
            <para>http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.1</para>
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.Public">
            <summary>
            Set Cache-Control: public to the message response header.
            <para>Indicates that the response MAY be cached by any cache, even if it would normally be non-cacheable or cacheable only within a non- shared cache. (See also Authorization, section 14.8, for additional details.)</para>
            <para>http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.1</para>
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.StaleWhileRevalidate">
            <summary>
            Set Cache-Control: max-age=*seconds*, stale-while-revalidate=*seconds* to the response message
            <para>This should be used with <see cref="P:Flatwhite.WebApi.OutputCacheAttribute.MaxAge" /> to indicates that caches MAY serve the response in which it appears after it becomes stale, up to the indicated number of seconds https://tools.ietf.org/html/rfc5861 </para>
            <para>The first request comes to the server and gets a stale cache will also make the cache system auto refresh once. So if the endpoint is not 
            so active, it's better to turn on <see cref="P:Flatwhite.WebApi.OutputCacheAttribute.AutoRefresh" /> to make the cache refresh when it starts to be stale</para> 
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.StaleIfError">
            <summary>
            Set Cache-Control: max-age=*seconds*, stale-if-error=*seconds* to the response message
            <para>This should be used with <see cref="P:Flatwhite.WebApi.OutputCacheAttribute.MaxAge" /> to indicates that caches may be used if an error is encountered after becoming stale for an additional indicated number of seconds</para>
            https://tools.ietf.org/html/rfc5861#4.1
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.IgnoreRevalidationRequest">
            <summary>
            A cache MAY be configured to return stale responses without validation
            <para>If set to TRUE, the server will return cache item as soon as the cache item is available and ignore all cache control directives sent from client
            such as no-cache, no-store or max-age, max-stale. Warning 110 (Response is stale) will be included in the response header</para>
            <para>This may be helpful to guarantee that the endpoint will not revalidate the cache all the time by some one sending request with no-cache header</para>
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.RevalidateKeyFormat">
            <summary>
            A key to used to delete the cache when an method with relevant <see cref="T:Flatwhite.WebApi.RevalidateAttribute" /> is invoked
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.AutoRefresh">
            <summary>
            If set to true, the cache will be auto refreshed every <see cref="P:Flatwhite.WebApi.OutputCacheAttribute.MaxAge"/> second(s).
            <para>It's a trade-off to turn this on as you don't want too many Timers trying to refresh your cache data very small amout of seconds especially when you have <see cref="P:Flatwhite.WebApi.OutputCacheAttribute.MaxAge"/> too small
            and there is so many variaties of the cache (because of ,<see cref="P:Flatwhite.WebApi.OutputCacheAttribute.VaryByParam" />). 
            </para>
            <para>If the api endpoint is a busy endpoint with small value of <see cref="P:Flatwhite.WebApi.OutputCacheAttribute.MaxAge"/>, it's better to keep this off and use <see cref="P:Flatwhite.WebApi.OutputCacheAttribute.StaleWhileRevalidate"/></para>
            <para>If the endpoint is not that busy but you want to keep the cache always available, turn this on and specify the <see cref="P:Flatwhite.WebApi.OutputCacheAttribute.StaleWhileRevalidate"/> with a value greater than 0</para>
            </summary>
        </member>
        <member name="P:Flatwhite.WebApi.OutputCacheAttribute.CacheProfile">
            <summary>
            Configures the output cache profile that can be used by the application
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.OutputCacheAttribute.GetCacheStrategy(System.Net.Http.HttpRequestMessage,Flatwhite._IInvocation,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Get <see cref="T:Flatwhite.ICacheStrategy" /> from <see cref="T:System.Web.Http.Dependencies.IDependencyScope" /> if <see cref="P:Flatwhite.WebApi.OutputCacheAttribute.CacheStrategyType"/> has value
            <para>Otherwise resolve from <see cref="P:Flatwhite.Global.CacheStrategyProvider"/></para>
            </summary>
            <param name="request"></param>
            <param name="invocation"></param>
            <param name="invocationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.WebApi.OutputCacheAttribute.OnActionExecutingAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
            <summary>
            Check CacheControl request, get CacheItem, build response and return if cache available
            </summary>
            <param name="actionContext"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Flatwhite.WebApi.OutputCacheAttribute.ShouldIgnoreCache(System.Net.Http.Headers.CacheControlHeaderValue,System.Net.Http.HttpRequestMessage)">
            <summary>
            Determine whether or not should ignore all the cache settings base on the 
            </summary>
            <param name="cacheControl"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.WebApi.OutputCacheAttribute.OnActionExecutedAsync(System.Web.Http.Filters.HttpActionExecutedContext,System.Threading.CancellationToken)">
            <summary>
            Store the response to cache store, add CacheControl and Etag to response
            </summary>
            <param name="actionExecutedContext"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.WebApi.OutputCacheAttribute.ApplyResponseCacheHeaders(System.Net.Http.HttpResponseMessage,System.Net.Http.HttpRequestMessage)">
            <summary>
            Apply the CacheControl header to response
            </summary>
            <param name="response"></param>
            <param name="request"></param>
        </member>
        <member name="M:Flatwhite.WebApi.OutputCacheAttribute.HashCacheKey(System.String)">
            <summary>
            Make a hash string of the original senstivive cacheKey
            </summary>
            <param name="originalCacheKey"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.WebApi.OutputCacheAttribute.GetInvocation(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Get <see cref="T:Flatwhite._IInvocation" /> from <see cref="T:System.Web.Http.Controllers.HttpActionContext" />
            </summary>
            <param name="actionContext"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.WebApi.OutputCacheAttribute.GetInvocationContext(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Get context data from <see cref="T:System.Web.Http.Controllers.HttpActionContext" />
            </summary>
            <param name="actionContext"></param>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.WebApi.OutputCacheAttribute.GetAllVaryCustomKey">
            <summary>
            Get all vary by custom string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.WebApi.WebApiContextProvider">
            <summary>
            A <see cref="T:Flatwhite.Provider.IContextProvider" /> for webapi that puts request data to the context dictionary
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.WebApiContextProvider.#ctor(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Initializes an instance of <see cref="T:Flatwhite.WebApi.WebApiContextProvider" />
            </summary>
            <param name="httpActionContext"></param>
        </member>
        <member name="M:Flatwhite.WebApi.WebApiContextProvider.GetContext">
            <summary>
            Create the context from request
            </summary>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.WebApi.WebApiExtensions">
            <summary>
            Provide extension methods to enable Flatwhite WebApi cache
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.WebApiExtensions.UseFlatwhiteCache(System.Web.Http.HttpConfiguration,Flatwhite.WebApi.FlatwhiteWebApiConfiguration)">
            <summary>
            Create required components to use Flatwhite cache for WebApi
            </summary>
            <param name="config"></param>
            <param name="flatwhiteConfig"></param>
        </member>
        <member name="M:Flatwhite.WebApi.WebApiExtensions.GetFlatwhiteCacheConfiguration(System.Web.Http.HttpConfiguration)">
            <summary>
            Get current Flatwhite cache configuration
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="T:Flatwhite.WebApi.WebApiPhoenix">
            <summary>
            A web api phoenix to support auto refresh for webApi
            <para>
            It will send a request to the same endpoint in the background with a special header to force Flatwhite to invoke the controller instead of getting the stale cache.
            </para>
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.WebApiPhoenix.#ctor(Flatwhite._IInvocation,Flatwhite.WebApi.WebApiCacheItem,System.Net.Http.HttpRequestMessage)">
            <summary>
            Initializes a WebApiPhoenix
            </summary>
            <param name="invocation"></param>
            <param name="cacheItem">This should the the WebApiCacheItem instance</param>
            <param name="originalRequestMessage"></param>
        </member>
        <member name="M:Flatwhite.WebApi.WebApiPhoenix.FireAsync">
            <summary>
            Send a http request with special header to loop back address to by pass the cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flatwhite.WebApi.WebApiPhoenix.GetHttpClient">
            <summary>
            Get HttpClient
            </summary>
            <returns></returns>
        </member>
        <member name="P:Flatwhite.WebApi.WebApiPhoenix.Activator">
            <summary>
            Not support in WebAPI
            </summary>
        </member>
        <member name="M:Flatwhite.WebApi.WebApiPhoenix.GetTargetInstance(Flatwhite.ICacheDependencyScope)">
            <summary>
            Not support in WebAPI
            </summary>
            <param name="scope"></param>
            <returns></returns>
        </member>
    </members>
</doc>
